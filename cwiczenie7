-- ĆWICZENIE 7

-- 1.
-- Pobierz dane o nazwie 1:250 000 Scale Colour Raster™ Free OS OpenData ze strony:

-- 2. 
-- Załaduj te dane do tabeli o nazwie uk_250k.
-- ładowanie pliku
-- raster2pgsql -s 27700 -I -N -32767 -C -M C:\BAZY_DANYCH\ras250_gb\data\*tif -F -t 100x100 raster.uk_250k | .\psql -d raster -h localhost -U postgres -p 5432
-- EPSG:27700 OSGB36 / British National Grid -- United Kingdom Ordnance Survey

SELECT * FROM raster.uk_250k

--STRONA 1: utworzenie indeksu przestrzennego
CREATE INDEX idx_uk_250k ON raster.uk_250k
USING gist (ST_ConvexHull(rast));

--STRONA 1: dodanie raster constraints
-- schema::name table_name::name raster_column::name
SELECT AddRasterConstraints('raster'::name,'uk_250k'::name,'rast'::name);


-- 3.
-- Połącz te dane (wszystkie kafle) w mozaikę, a następnie wyeksportuj jako GeoTIFF.
-- STRONA 2: Przykład 3 - ST_Union -- Połączenie wielu kafelków w jeden raster.
CREATE TABLE raster.mosaic AS
SELECT ST_Union(r.rast)
FROM raster.uk_250k as r

-- STRONA 10: Przykład 3 - Zapisywanie danych na dysku za pomocą dużego obiektu (large object, lo)
CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
       ST_AsGDALRaster(ST_Union(rast), 'GTiff',  ARRAY['COMPRESS=DEFLATE', 'PREDICTOR=2', 'PZLEVEL=9'])
        ) AS loid
FROM raster.mosaic;

SELECT lo_export(loid, 'C:\BAZY_DANYCH\ras250_gb\data\mosaic.tiff') --> Save the file in a place where the user postgres have access. In windows a flash drive usualy works fine.
FROM tmp_out;

SELECT lo_unlink(loid)
FROM tmp_out; --> Delete the large object.

DROP TABLE tmp_out;


-- 5.
-- Załaduj do bazy danych tabelę reprezentującą granice parków narodowych.
-- shp2pgsql -s 27700 C:\BAZY_DANYCH\ras250_gb\data\parks\parks.shp raster.parks | psql -d raster -h localhost -U postgres -p 5432
SELECT * FROM raster.parks;


-- 6.
-- Utwórz nową tabelę o nazwie uk_lake_district, do której zaimportujesz mapy rastrowe z punktu 1., które zostaną przycięte do granic parku narodowego Lake District.
CREATE TABLE raster.uk_lake_district AS
SELECT r.rid, ST_Clip(r.rast, p.geom, true) AS rast, p.id
FROM raster.uk_250k AS r, raster.parks AS p
WHERE ST_Intersects(r.rast, p.geom) AND p.id = 1;
-- SELECT UpdateRasterSRID('rasters','uk_lake_district','rast',27700);

-- 7.
-- Wyeksportuj wyniki do pliku GeoTIFF.
-- STRONA 10: Przykład 3 - Zapisywanie danych na dysku za pomocą dużego obiektu (large object, lo)
CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
       ST_AsGDALRaster(ST_Union(rast), 'GTiff',  ARRAY['COMPRESS=DEFLATE', 'PREDICTOR=2', 'PZLEVEL=9'])
        ) AS loid
FROM raster.uk_lake_district;

SELECT lo_export(loid, 'C:\BAZY_DANYCH\ras250_gb\data\uk_lake_district.tiff') --> Save the file in a place where the user postgres have access. In windows a flash drive usualy works fine.
FROM tmp_out;

SELECT lo_unlink(loid)
FROM tmp_out; --> Delete the large object.

DROP TABLE tmp_out;


-- 8. 
-- Pobierz dane z satelity Sentinel-2 wykorzystując portal: https://scihub.copernicus.eu
-- Wybierz dowolne zobrazowanie, które pokryje teren parku Lake District oraz gdzie parametr
-- cloud coverage będzie poniżej 20%.


-- 9.
-- Załaduj dane z Sentinela-2 do bazy danych.
-- Komenda do wczytania:
--raster2pgsql -s 27700 -I -N -32767 -C -M C:\BAZY_DANYCH\dane_landsat2\landsat_lewy\GRANULE\L1C_T30UVF_A038973_20221208T113452\IMG_DATA\B03.jp2 -F -t 100x100 raster.landsat_lewy | .\psql -d raster -h localhost -U postgres -p 5432
--raster2pgsql -s 27700 -I -N -32767 -C -M C:\BAZY_DANYCH\dane_landsat2\landsat_prawy\GRANULE\L2A_T30UWF_A029707_20221113T113318\IMG_DATA\R10m\B08.jp2 -F -t 100x100 raster.landsat_prawy | .\psql -d raster -h localhost -U postgres -p 5432
SELECT * FROM raster.landsat_lewy
SELECT * FROM raster.landsat_prawy

-- 10.
-- Policz indeks NDWI oraz przytnij wyniki do granic Lake District.

-- Sentinel-2 NDWI = (B03 - B08) / (B03 + B08)

-- STRONA 7: 	Przykład 1 - Wyrażenie Algebry Map

WITH r1 AS (
(SELECT ST_Union(ST_Clip(b3.rast, p.geom, true)) AS rast
FROM raster.landsat_lewy AS b3, raster.parks AS p                                         --Sentinel 2, pomyłka w nazwie
WHERE ST_Intersects(b3.rast, p.geom) AND p.id = 1)),
r2 AS (
(SELECT ST_Union(ST_Clip(b8.rast, p.geom, true)) AS rast
FROM raster.landsat_prawy AS b8, raster.parks AS p                                          --Sentinel 2, pomyłka w nazwie
WHERE ST_Intersects(b8.rast,p.geom) AND p.id = 1))

SELECT ST_MapAlgebra(r1.rast, r2.rast, '([rast1.val]-[rast2.val])/([rast1.val]+[rast2.val])::float', '32BF') AS rast
INTO raster.uk_lake_district_ndwi FROM r1, r2;

-- 11.
-- Wyeksportuj obliczony i przycięty wskaźnik NDWI do GeoTIFF.

CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
       ST_AsGDALRaster(ST_Union(rast), 'GTiff',  ARRAY['COMPRESS=DEFLATE', 'PREDICTOR=2', 'PZLEVEL=9'])
        ) AS loid
FROM raster.uk_lake_district_ndwi;

SELECT lo_export(loid, 'C:\BAZY_DANYCH\ras250_gb\data\uk_lake_district_ndwi.tiff') --> Save the file in a place where the user postgres have access. In windows a flash drive usualy works fine.
FROM tmp_out;

SELECT lo_unlink(loid)
FROM tmp_out; --> Delete the large object.

DROP TABLE tmp_out;




